@{
    ViewData["Title"] = "Upload PDF";
}

<link rel="stylesheet" href="~/css/pdf.css" asp-append-version="true">

@if (User.IsInRole("SuperStudent"))
{
    <div class="container d-flex justify-content-center p-5 row-cols-lg-2">
        <div class="d-flex flex-column justify-content-center gap-4">
            
            <h1 class="text-primary fw-bold align-self-center">Upload private PDF</h1>
            <div class="d-flex flex-row gap-4 align-items-center">
                <img src="~/images/folder-solid.svg" alt="Logo" class="icon"/>
                <p class="mt-2">For uploading PDFs and adding them to the private repository.</p>
            </div>

            <form class="d-flex flex-column gap-3" id="uploadPrivateForm" action="@Url.Action("UploadPrivatePdf", "Pdf")" enctype="multipart/form-data">
                
                <div class="form-group d-flex flex-row gap-3">
                    <label id="browse" class="btn btn-primary" for="file">Browse...</label>
                    <input class="pdf-input" type="file" id="file" name="file" required/>
                    <input id="browseFileShown" class="form-control form-bg-color" type="text" value="File name" aria-label="Disabled input example" disabled readonly>
                </div>

                <div class="d-flex gap-lg-3 gap-1">
                    <p class="text-break w-75">Tags make it easier for students to sort out the materials they need.
                        Add relevant tags to your PDF using the drop table.</p>
                    <div class="form-group w-50">
                        <select class="form-control form-bg-color" id="tagName" name="tagName" required>
                            <option value="" disabled selected>Select your tag</option>
                            @foreach (var tag in ViewBag.Tags)
                            {
                                <option value="@tag.Value">@tag.Text</option>
                            }
                        </select>
                    </div>
                </div>
                
                
                <div class="d-flex justify-content-start align-items-center gap-4">
                    <button class="btn btn-primary" type="submit">Upload Private PDF</button>
                    <div id="notification" class="fw-bold notification msg-animation">File uploaded successfully.</div>
                    <div id="error" class="fw-bold error msg-animation"></div>
                </div>
                
            </form>
        </div>
    </div>
}

@if (User.IsInRole("Educator"))
{
    <div class="container d-flex justify-content-center p-lg-5 p-0 row-cols-lg-2">
        <div class="d-flex flex-column justify-content-center gap-4">

            <h1 class="text-primary fw-bold align-self-center">Upload public PDF</h1>
            <div class="d-flex flex-row gap-4 align-items-center">
                <img src="~/images/folder-solid.svg" alt="Logo" class="icon"/>
                <p class="mt-2">For uploading PDFs and adding them to the public repository.</p>
            </div>

            <form class="d-flex flex-column gap-3" id="uploadPublicForm" action="@Url.Action("UploadPublicPdf", "Pdf")" enctype="multipart/form-data">

                <div class="form-group d-flex flex-row gap-3">
                    <label id="browse" class="btn btn-primary" for="file">Browse...</label>
                    <input class="pdf-input" type="file" id="file" name="file" required/>
                    <input id="browseFileShown" class="form-control form-bg-color pdf-name" type="text" value="File name" aria-label="Disabled input example" disabled readonly>
                </div>

                <div class="d-flex gap-lg-3 gap-1">
                    <p class="text-break w-75">Tags make it easier for students to sort out the materials they need.
                        Add relevant tags to your PDF using the drop table.</p>
                    <div class="form-group w-50">
                        <select class="form-control form-bg-color" id="tagName" name="tagName" required>
                            <option value="" disabled selected>Select your tag</option>
                            @foreach (var tag in ViewBag.Tags)
                            {
                                <option value="@tag.Value">@tag.Text</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="d-flex justify-content-start align-items-center gap-4">
                    <button class="btn btn-primary" type="submit">Upload Public PDF</button>
                    <div id="notification" class="fw-bold notification msg-animation">File uploaded successfully.</div>
                    <div id="error" class="fw-bold error msg-animation"></div>
                </div>

            </form>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.getElementById("file").addEventListener("change", function () {
            var selectedFile = document.getElementById("file").files[0].name;
            document.getElementById("browseFileShown").setAttribute("value", selectedFile.toString());
        });
      
        // notification update
        async function checkAndSubmitForm(form, isPublic) {
            const formData = new FormData(form);
            const pdfName = formData.get('file').name;
            const response = await fetch(`@Url.Action("FetchPdfByName", "Pdf")?pdfName=${encodeURIComponent(pdfName)}&isPublic=${isPublic}`, {
                method: 'GET'
            });

            const exists = await response.json();

            if (exists) {
                const confirmReplace = confirm("The PDF already exists. Do you want to replace it?");
                if (!confirmReplace) {
                    return;
                }
            }

            const uploadResponse = await fetch(form.action, {
                method: 'POST',
                body: formData
            });

            if (uploadResponse.ok) {
                document.getElementById('notification').style.display = 'block';
                document.getElementById('error').style.display = 'none';
            } else {
                const errorText = await uploadResponse.text();
                document.getElementById('error').innerText = `Error: ${errorText}`;
                document.getElementById('error').style.display = 'block';
                document.getElementById('notification').style.display = 'none';
            }
        }

        document.getElementById('uploadPrivateForm')?.addEventListener('submit', function (event) {
            event.preventDefault();
            checkAndSubmitForm(this, false);
        });

        document.getElementById('uploadPublicForm')?.addEventListener('submit', function (event) {
            event.preventDefault();
            checkAndSubmitForm(this, true);
        });

        // hiding the success message (so that it is not constantly visible after one successful upload)
        // same for the error message
        document.getElementById('file').addEventListener('click', function () {
            document.getElementById('notification').style.display = 'none';
            document.getElementById('error').style.display = 'none';
        });

        document.getElementById('tagName').addEventListener('click', function () {
            document.getElementById('notification').style.display = 'none';
            document.getElementById('error').style.display = 'none';
        });
    
    
    </script>
}
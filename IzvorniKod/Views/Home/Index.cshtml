@model List<DuckI.Dtos.PrivateAndFlaggedPdfDto>

@{
    ViewData["Title"] = "Home Page";
    var uploadSuccess = TempData["UploadSuccess"] as bool?;
}

<div class="text-center">
    <h1 class="display-4">Welcome To DuckI</h1>
</div>

@if (User.IsInRole("SuperStudent") || User.IsInRole("Educator") || User.IsInRole("Admin") || User.IsInRole("Reviewer"))
{
    <link rel="stylesheet" href="~/css/calendar.css" asp-append-version="true"/>
    
    <div class="text-center">
        <h1 class="display-4">User</h1>
        <p>Enjoy your stay!</p>
    </div>
    <div class="text-center">
        <button onclick="window.location.href='@Url.Action("UploadCalendar", "Home")'" class="btn btn-primary">Upload Calendar</button>
    </div>
    <div class="text-center">
        <button id="fetchCalendarButton" class="btn btn-primary mt-3">Fetch Calendar</button>
    </div>

    <!-- Calendar Container -->
    <div id="calendarContainer" class="container mt-3" style="display:none;">
        <div class="d-flex justify-content-between mb-2">
            <button id="prevMonthButton" class="btn btn-primary">Previous Month</button>

            <span id="monthLabel" class="d-flex align-items-center justify-content-center" style="font-size: 1.2em;"></span>

            <button id="nextMonthButton" class="btn btn-primary">Next Month</button>
        </div>

        <!-- Days of the week headers -->
        <div class="row text-center">
            <div class="col">MON</div>
            <div class="col">TUE</div>
            <div class="col">WED</div>
            <div class="col">THU</div>
            <div class="col">FRI</div>
            <div class="col">SAT</div>
            <div class="col">SUN</div>
        </div>

        <!-- Calendar grid using Bootstrap row-cols-7 -->
        <div id="calendarGrid" class="row row-cols-7 g-0"></div>
    </div>
}

@if (User.IsInRole("SuperStudent"))
{
    <div class="container mt-4">
        <h2>List of Private and Flagged PDFs</h2>
        <div>
            <select id="tagFilter" class="form-control">
                <option value="">All Tags</option>
            </select>
            <button id="filterButton" class="btn btn-primary mt-2">Filter</button>
        </div>
        <table class="table">
            <thead>
            <tr>
                <th>PDF Name</th>
                <th>Uploaded by</th>
                <th>Rating</th>
                <th>Tag Name</th>
                <th>Type</th>
                <th>Actions</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
            </thead>
            <tbody id="pdfTableBody">
            @foreach (var pdf in Model)
            {
                <tr>
                    <td>
                        <form action="@(pdf.IsPublic ? Url.Action("OpenPublicPdf", "Pdf") : Url.Action("OpenPrivatePdf", "Pdf"))" method="post" target="_blank">
                            <input type="hidden" name="pdfId" value="@pdf.PdfId" />
                            <button type="submit" class="btn-link">@pdf.PdfName</button>
                        </form>
                    </td>
                    <td>@(pdf.IsPublic ? pdf.EducatorUsername : "You" )</td>
                    <td>@pdf.Rating</td>
                    <td>@pdf.TagName</td>
                    <td>@(pdf.IsPublic ? "Public" : "Private")</td>
                    @if (pdf.IsPublic)
                    {
                        <td>
                            <form class="unflag-form" data-pdf-id="@pdf.PdfId" style="display:inline;">
                                <input type="hidden" name="publicPdfId" value="@pdf.PdfId" />
                                <button type="submit" class="btn btn-danger">Unflag</button>
                            </form>
                        </td>
                        <td>
                            <form action="@Url.Action("RatePdf", "Home")" method="post" style="display:inline;">
                                <input type="hidden" name="pdfId" value="@pdf.PdfId" />
                                <input type="hidden" name="isUpvote" value="true" />
                                <button type="submit" class="btn btn-success">Upvote</button>
                            </form>
                        </td>
                        <td>
                            <form action="@Url.Action("RatePdf", "Home")" method="post" style="display:inline;">
                                <input type="hidden" name="pdfId" value="@pdf.PdfId" />
                                <input type="hidden" name="isUpvote" value="false" />
                                <button type="submit" class="btn btn-warning">Downvote</button>
                            </form>
                        </td>
                    }
                    else
                    {
                    <td>
                        <form action="@Url.Action("DeletePrivatePdf", "Pdf")" method="post" style="display:inline;">
                            <input type="hidden" name="pdfId" value="@pdf.PdfId" />
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    </td>
                    }
                    <td>
                        <form action="@Url.Action("CreateTask", "Tasks")" method="post" style="display:inline;">
                            <input type="hidden" name="pdfId" value="@pdf.PdfId" />
                            <input type="hidden" name="isPublic" value="@(pdf.IsPublic ? "true" : "false")" />
                            <button type="submit" class="btn btn-primary">Create Flashcards</button>
                        </form>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@if (User.IsInRole("Educator"))
{
    <div class="container mt-4">
        <h2>List of Your Pdfs</h2>
        <div>
            <select id="educatorTagFilter" class="form-control">
                <option value="">All Tags</option>
            </select>
            <button id="educatorFilterButton" class="btn btn-primary mt-2">Filter</button>
        </div>
        <table class="table">
            <thead>
            <tr>
                <th>PDF Name</th>
                <th>Rating</th>
                <th>Tag Name</th>
                <th>Action</th>
            </tr>
            </thead>
            <tbody id="educatorPdfTableBody">
            @foreach (var pdf in Model)
            {
                <tr>
                    <td>
                        <form action="@Url.Action("OpenPublicPdf", "Pdf")" method="post" target="_blank">
                            <input type="hidden" name="pdfId" value="@pdf.PdfId" />
                            <button type="submit" class="btn-link">@pdf.PdfName</button>
                        </form>
                    </td>
                    <td>@pdf.Rating</td>
                    <td>@pdf.TagName</td>
                    <td>
                        <form action="@Url.Action("DeletePublicPdf", "Pdf")" method="post" style="display:inline;">
                            <input type="hidden" name="pdfId" value="@pdf.PdfId" />
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@*
<!-- Delete Event Button Example for Frontend team-->
<div class="text-center">
    <button id="deleteEventButton" class="btn btn-primary mt-3">Delete Event</button>
</div>
*@

@* This script attaches getcalendar route to the fetch calendar button and changes content of calendarContent div *@
@section Scripts {
    <script src="~/js/index.js" asp-append-version="true"></script>
    <script>
        @if (User.IsInRole("SuperStudent"))
        {
            <text>
                document.addEventListener('DOMContentLoaded', async function() {
                    const response = await fetch('/Pdf/GetAllTags', {
                        method: 'GET'
                    });
                    const tags = await response.json();
                    console.log('Fetched tags:', tags); 
                    const tagFilter = document.getElementById('tagFilter');
                    tags.forEach(tag => {
                        const option = document.createElement('option');
                        option.value = tag.tagName;
                        option.textContent = tag.tagName;
                        tagFilter.appendChild(option);
                    });
                });
            
                document.getElementById('filterButton').addEventListener('click', function() {
                    const selectedTag = document.getElementById('tagFilter').value.toLowerCase();
                    const rows = document.querySelectorAll('#pdfTableBody tr');

                    rows.forEach(row => {
                        const tagName = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
                        if (selectedTag === "" || tagName === selectedTag) {
                            row.style.display = "";
                        } else {
                            row.style.display = "none";
                        }
                    });
                });
            </text>
        }
        @if (User.IsInRole("Educator"))
        {
            <text>
                document.addEventListener('DOMContentLoaded', async function() {
                    const response = await fetch('/Pdf/GetAllTags', {
                        method: 'GET'
                    });
                    const tags = await response.json();
                    console.log('Fetched tags:', tags);
                    const tagFilter = document.getElementById('educatorTagFilter');
                    tags.forEach(tag => {
                        const option = document.createElement('option');
                        option.value = tag.tagName;
                        option.textContent = tag.tagName;
                        tagFilter.appendChild(option);
                    });
                });

                document.getElementById('educatorFilterButton').addEventListener('click', function() {
                    const selectedTag = document.getElementById('educatorTagFilter').value.toLowerCase();
                    const rows = document.querySelectorAll('#educatorPdfTableBody tr');

                    rows.forEach(row => {
                        const tagName = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                        if (selectedTag === "" || tagName === selectedTag) {
                            row.style.display = "";
                        } else {
                            row.style.display = "none";
                        }
                    });
                });
            </text>
        }
                
        // check if the calendar is succesfully uploaded
        @if (uploadSuccess == true)
        {
            <text>alert('File successfully updated!');</text>
        }
        
        // for unflagging for SuperStudents
        @if (User.IsInRole("SuperStudent"))
        {
            <text>
                document.querySelectorAll('.unflag-form').forEach(form => {
                    form.addEventListener('submit', async function(event) {
                        event.preventDefault();
                        const formData = new FormData(this);
                        const response = await fetch('/Pdf/UnflagPdf', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            location.reload();
                        } else {
                            alert('Failed to unflag the PDF.');
                            location.reload();
                        }
                    });
                });        
            </text>
        }   
        @*
        // Example of using the delete route (same for add route) for frontend team
        document.getElementById('deleteEventButton').addEventListener('click', async function() {
            const eventDate = prompt("Enter event date (YYYY-MM-DD):");
            const eventDescription = prompt("Enter event description:");

            if (eventDate && eventDescription) {
                const response = await fetch(`/api/calendars/deleteevent?eventDate=${encodeURIComponent(eventDate)}&eventDescription=${encodeURIComponent(eventDescription)}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert('Event deleted successfully.');
                } else {
                    alert('Failed to delete event.');
                }
            } else {
                alert('Event date and description are required.');
            }
        });
        *@
    </script>
}
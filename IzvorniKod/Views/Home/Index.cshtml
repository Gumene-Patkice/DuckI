<!-- This has to be added if we want to perform role based operations in the view -->
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Home Page";
    var uploadSuccess = TempData["UploadSuccess"] as bool?;
}

<div class="text-center">
    <h1 class="display-4">Welcome To DuckI</h1>
</div>

@if (User.IsInRole("Student"))
{
    <div class="text-center">
        <h1 class="display-4">Student</h1>
        <p>Enjoy your stay!</p>
    </div>
    <div class="text-center">
        <button onclick="window.location.href='@Url.Action("UploadCalendar", "Home")'" class="btn btn-primary">Upload Calendar</button>
    </div>
    <div class="text-center">
        <button id="fetchCalendarButton" class="btn btn-primary">Fetch Calendar</button>
    </div>

    <!-- Calendar Container -->
    <div id="calendarContainer" class="container mt-3" style="display:none;">
        <div class="d-flex justify-content-between mb-2">
            <button id="prevMonthButton" class="btn btn-secondary">Previous Month</button>

            <span id="monthLabel" class="d-flex align-items-center justify-content-center" style="font-size: 1.2em;"></span>

            <button id="nextMonthButton" class="btn btn-secondary">Next Month</button>
        </div>

        <!-- Days of the week headers -->
        <div class="row text-center mb-2">
            <div class="col">Mon</div>
            <div class="col">Tue</div>
            <div class="col">Wed</div>
            <div class="col">Thu</div>
            <div class="col">Fri</div>
            <div class="col">Sat</div>
            <div class="col">Sun</div>
        </div>

        <!-- Calendar grid using Bootstrap row-cols-7 -->
        <div id="calendarGrid" class="row row-cols-7 g-0"></div>
    </div>
}

<style>
    .day-cell {
        width: 100%;
        height: 100px;
        overflow: hidden;
    }

    .event-container {
        max-height: 60px;
        overflow-y: auto;
        width: 100%;
    }

    .event-text {
        font-size: 0.85em;
        white-space: normal;
        overflow-wrap: break-word;
        text-overflow: ellipsis;
    }

    .day-placeholder {
        height: 1.5em;
        visibility: hidden;
    }
</style>

@* This script attaches getcalendar route to the fetch calendar button and changes content of calendarContent div *@
@section Scripts {
    <script>
        let currentDate = new Date(); // Initialize with the current date
        
        document.getElementById('fetchCalendarButton').addEventListener('click', () => renderCalendar());
        document.getElementById('prevMonthButton').addEventListener('click', () => changeMonth(-1));
        document.getElementById('nextMonthButton').addEventListener('click', () => changeMonth(1));
    
        async function renderCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();

            // Update the displayed month name
            updateMonthLabel();

            const response = await fetch(`/api/calendars/getcalendar`);

            if (response.ok) {
                // Show the calendar controls (buttons, headers, etc.)
                document.getElementById('calendarContainer').style.display = 'block';
                
                // Clear the calendar grid
                document.getElementById('calendarGrid').innerHTML = '';

                // Get the days in the month and the starting day
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                const firstDayOfMonth = new Date(year, month, 1).getDay();
                const offset = (firstDayOfMonth === 0) ? 6 : firstDayOfMonth - 1;

                let weekRow = document.createElement('div');
                weekRow.classList.add('row', 'g-0'); // Create the first row for the initial offset cells
                document.getElementById('calendarGrid').appendChild(weekRow);

                // Fill in empty cells for days before the start of the month
                for (let i = 0; i < offset; i++) {
                    weekRow.appendChild(createEmptyDayCell());
                }

                // Fill in the actual days of the month, creating new rows for each week
                for (let day = 1; day <= daysInMonth; day++) {
                    if ((offset + day - 1) % 7 === 0 && day !== 1) { // Start a new row every 7 cells
                        weekRow = document.createElement('div');
                        weekRow.classList.add('row', 'g-0');
                        document.getElementById('calendarGrid').appendChild(weekRow);
                    }
                    weekRow.appendChild(createDayCell(day));
                }

                // Add empty cells to complete the last row, if needed
                const remainingCells = 7 - weekRow.children.length;
                for (let i = 0; i < remainingCells; i++) {
                    weekRow.appendChild(createEmptyDayCell());
                }

                // Parse CSV and populate events
                const csvContent = await response.text();
                const eventData = parseCSV(csvContent);
                eventData.forEach(event => {
                    const eventDate = new Date(event.date);
                    if (eventDate.getFullYear() === year && eventDate.getMonth() === month) {
                        const eventDay = eventDate.getDate();
                        const dayCell = document.querySelector(`#calendarGrid .day-cell[data-day="${eventDay}"]`);
                        if (dayCell) {
                            const eventDiv = document.createElement('div');
                            eventDiv.classList.add('event-text');
                            eventDiv.innerText = event.event;
                            dayCell.querySelector('.event-container').appendChild(eventDiv);
                        }
                    }
                });
            } else {
                alert('Failed to fetch calendar.');
            }
        }
        
        function changeMonth(delta) {
            currentDate.setMonth(currentDate.getMonth() + delta);
            renderCalendar();
        }

        function parseCSV(data) {
            return data.split('\n').filter(line => line.trim() !== '').map(line => {
                const [date, event] = line.split(',');
                return { date, event };
            });
        }

        function createEmptyDayCell() {
            const emptyCell = document.createElement('div');
            emptyCell.classList.add('col', 'border', 'd-flex', 'flex-column', 'align-items-center', 'justify-content-start', 'p-2', 'day-cell');

            // Add a placeholder element to maintain consistent layout
            const placeholder = document.createElement('div');
            placeholder.classList.add('day-placeholder');
            emptyCell.appendChild(placeholder);

            return emptyCell;
        }

        function createDayCell(day) {
            const dayCell = document.createElement('div');
            dayCell.classList.add('col', 'border', 'd-flex', 'flex-column', 'align-items-center', 'justify-content-start', 'p-2', 'day-cell');
            dayCell.setAttribute('data-day', day);

            // Create the day number element and append it
            const dayNumber = document.createElement('strong');
            dayNumber.innerText = day;
            dayCell.appendChild(dayNumber);

            // Create the event container (initially empty)
            const eventContainer = document.createElement('div');
            eventContainer.classList.add('event-container', 'd-flex', 'flex-column', 'align-items-center', 'w-100', 'overflow-scroll');
            dayCell.appendChild(eventContainer);

            return dayCell;
        }

        function updateMonthLabel() {
            const monthNames = [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ];
            const month = currentDate.getMonth();
            const year = currentDate.getFullYear();
            const monthLabel = document.getElementById('monthLabel');
            monthLabel.innerText = `${monthNames[month]} ${year}`;
        }

        @if (uploadSuccess == true)
        {
        <text>alert('File successfully updated!');</text>
        }
    </script>
}